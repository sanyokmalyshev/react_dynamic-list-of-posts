{"version":3,"sources":["types/Error.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector/UserSelector.tsx","components/UserSelector/listenForOutsideClicks.tsx","utils/fetchClient.ts","components/Errors/Errors.tsx","App.tsx","index.tsx"],"names":["ErrorMessages","PostsList","posts","showPostDetails","useState","isOpenButton","setIsOpenButton","openPost","setOpenPost","className","map","post","id","title","type","onClick","handleButton","Loader","NewCommentForm","postId","addComment","nameValue","setNameValue","emailValue","setemailValue","commentText","setCommenttext","nameError","setNameError","emailError","setEmailError","commentError","setCommentError","isLoading","setIsLoading","handleInputs","value","name","checkIsEmptyInputs","isError","submitForm","e","a","preventDefault","data","email","body","htmlFor","placeholder","classNames","onChange","target","PostDetails","comments","isLoadingComments","deleteComment","error","isClickedCommentButton","setisClickedCommentButton","useEffect","length","comment","href","message","ErrorLoadComments","UserSelector","users","showPosts","isShowUsers","setIsShowUsers","selectedUser","setSelectedUser","menuRef","useRef","listening","setListening","setIsOpen","current","forEach","document","addEventListener","evt","contains","listenForOutsideClick","ref","role","user","handleClickUser","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","options","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","Errors","App","setUsers","None","setError","setPosts","seIsLoading","isOpenSidebar","seIsOpenSidebar","openedPost","setOpenedPost","postComments","setPostComments","setIsLoadingComments","handleError","getUsers","ErrorLoadUsers","loadUsers","getPosts","ErrorLoasPosts","loadComments","getComments","addCommentToPost","state","ErrorAddComment","findComment","find","filter","ErrorDeleteComment","undefined","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5df8f6ec.chunk.js","sourcesContent":["export enum ErrorMessages {\n  None = '',\n  ErrorLoadUsers = 'Unable to load users',\n  ErrorLoasPosts = 'Unable to load posts',\n  ErrorLoadComments = 'Unable to load comments',\n  ErrorAddComment = 'Unable to add comment',\n  ErrorDeleteComment = 'Unable to delete comment',\n}\n\nexport type Error = {\n  isError: boolean;\n  message: ErrorMessages;\n};\n","import React, { useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  showPostDetails: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, showPostDetails }) => {\n  const [isOpenButton, setIsOpenButton] = useState(false);\n  const [openPost, setOpenPost] = useState<Post>();\n\n  const handleButton = (\n    post: Post,\n  ) => {\n    if (post !== openPost) {\n      setOpenPost(post);\n      setIsOpenButton(true);\n      showPostDetails(post);\n    } else {\n      setIsOpenButton(!isOpenButton);\n      showPostDetails(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={`button is-link ${!(isOpenButton && (openPost?.id === post.id)) && 'is-light'}`}\n                  onClick={() => {\n                    handleButton(post);\n                  }}\n                >\n                  {isOpenButton\n                    && (openPost?.id === post.id) ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  postId: number | undefined;\n  addComment: (comment: {}) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addComment }) => {\n  const [nameValue, setNameValue] = useState('');\n  const [emailValue, setemailValue] = useState('');\n  const [commentText, setCommenttext] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleInputs = (value: string, name: string) => {\n    switch (name) {\n      case 'name':\n        setNameError(false);\n        setNameValue(value);\n        break;\n      case 'email':\n        setEmailError(false);\n        setemailValue(value);\n        break;\n      case 'body':\n        setCommentError(false);\n        setCommenttext(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  function checkIsEmptyInputs() {\n    let isError = false;\n\n    if (!nameValue) {\n      setNameError(true);\n      isError = true;\n    }\n\n    if (!emailValue) {\n      setEmailError(true);\n      isError = true;\n    }\n\n    if (!commentText) {\n      setCommentError(true);\n      isError = true;\n    }\n\n    return isError;\n  }\n\n  const submitForm = async (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (checkIsEmptyInputs()) {\n      setIsLoading(false);\n\n      return;\n    }\n\n    if (!postId) {\n      return;\n    }\n\n    const data = {\n      postId,\n      name: nameValue,\n      email: emailValue,\n      body: commentText,\n    };\n\n    await addComment(data);\n\n    setCommenttext('');\n\n    setIsLoading(false);\n  };\n\n  const clearButton = () => {\n    setNameValue('');\n    setemailValue('');\n    setCommenttext('');\n    setNameError(false);\n    setEmailError(false);\n    setCommentError(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': nameError },\n            )}\n            value={nameValue}\n            onChange={(e) => {\n              handleInputs(e.target.value, e.target.name);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emailError },\n            )}\n            value={emailValue}\n            onChange={(e) => {\n              handleInputs(e.target.value, e.target.name);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': commentError },\n            )}\n            value={commentText}\n            onChange={(e) => {\n              handleInputs(e.target.value, e.target.name);\n            }}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n            onClick={submitForm}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearButton}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { Comment } from '../types/Comment';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Error, ErrorMessages } from '../types/Error';\n\ntype Props = {\n  post: Post | undefined;\n  comments: Comment[];\n  isLoadingComments: boolean;\n  addComment: (comment: {}) => void;\n  deleteComment: (id: number) => void;\n  error: Error;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post, comments, isLoadingComments, addComment, deleteComment, error,\n}) => {\n  const [isClickedCommentButton, setisClickedCommentButton] = useState(false);\n\n  const handleWriteCommentButton = () => {\n    setisClickedCommentButton(true);\n  };\n\n  useEffect(() => {\n    setisClickedCommentButton(false);\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        {isLoadingComments ? (\n          <Loader />\n        ) : (\n          <div className=\"block\">\n            {!!comments.length && (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n                {comments.map(comment => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={comment.id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => {\n                          deleteComment(comment.id);\n                        }}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            )}\n\n            {(error.message !== ErrorMessages.ErrorLoadComments)\n            && !comments.length && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n            {(!isClickedCommentButton\n            && (error.message !== ErrorMessages.ErrorLoadComments)) && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={handleWriteCommentButton}\n              >\n                Write a comment\n              </button>\n            )}\n\n            {(error.message === ErrorMessages.ErrorLoadComments) && (\n              <div\n                data-cy=\"CommentsError\"\n                className={`notification is-danger ${!error.isError && 'hidden'}`}\n              >\n                {error.message}\n                <br />\n              </div>\n            )}\n          </div>\n        )}\n\n        {isClickedCommentButton\n          && <NewCommentForm postId={post?.id} addComment={addComment} />}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { User } from '../../types/User';\nimport listenForOutsideClick from './listenForOutsideClicks';\n\ntype Props = {\n  users: User[];\n  showPosts: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, showPosts }) => {\n  const [isShowUsers, setIsShowUsers] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const menuRef = useRef(null);\n  const [listening, setListening] = useState(false);\n\n  const handleClickUser = (user: User) => {\n    setSelectedUser(user);\n    setIsShowUsers(false);\n    showPosts(user);\n  };\n\n  useEffect(listenForOutsideClick(\n    listening,\n    setListening,\n    menuRef,\n    setIsShowUsers,\n  ));\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={menuRef}\n      className={`dropdown ${isShowUsers && 'is-active'}`}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setIsShowUsers(!isShowUsers);\n          }}\n        >\n          <span>{`${!selectedUser ? 'Choose a user' : selectedUser.name}`}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={`dropdown-item ${user.id === selectedUser?.id && 'is-active'}`}\n              key={user.id}\n              onClick={() => {\n                handleClickUser(user);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","export default function listenForOutsideClicks(\n  listening: boolean,\n  setListening: React.Dispatch<React.SetStateAction<boolean>>,\n  menuRef: React.RefObject<HTMLDivElement>,\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>,\n) {\n  return () => {\n    if (listening) {\n      return;\n    }\n\n    if (!menuRef.current) {\n      return;\n    }\n\n    setListening(true);\n    ['click', 'touchstart'].forEach(() => {\n      document.addEventListener('click', (evt) => {\n        if (menuRef.current?.contains(evt.target as Node)) {\n          return;\n        }\n\n        setIsOpen(false);\n      });\n    });\n  };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Error } from '../../types/Error';\nimport './Errors.scss';\n\ntype Props = {\n  error: Error;\n};\n\nexport const Errors: React.FC<Props> = ({ error }) => {\n  return (\n    <div\n      data-cy=\"PostsLoadingError\"\n      className={`notification is-danger ${!error.isError && 'hidden'}`}\n    >\n      {error.message}\n      <br />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { Loader } from './components/Loader';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Errors } from './components/Errors/Errors';\nimport { ErrorMessages } from './types/Error';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [error, setError] = useState({\n    isError: false,\n    message: ErrorMessages.None,\n  });\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, seIsLoading] = useState(false);\n  const [isOpenSidebar, seIsOpenSidebar] = useState(false);\n  const [openedPost, setOpenedPost] = useState<Post>();\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n\n  const handleError = (isError: boolean, message: ErrorMessages) => {\n    setError({ isError, message });\n  };\n\n  async function loadUsers() {\n    try {\n      handleError(false, ErrorMessages.None);\n      const getUsers = await client.get<User[]>('/users');\n\n      setUsers(getUsers);\n    } catch (e) {\n      handleError(true, ErrorMessages.ErrorLoadUsers);\n    }\n  }\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const showPosts = async (user: User) => {\n    seIsOpenSidebar(false);\n    setSelectedUser(user);\n    seIsLoading(true);\n    setPostComments([]);\n    try {\n      handleError(false, ErrorMessages.None);\n      const getPosts = await client.get<Post[]>(`/posts?userId=${user.id}`);\n\n      setPosts(getPosts);\n    } catch (e) {\n      handleError(true, ErrorMessages.ErrorLoasPosts);\n    }\n\n    seIsLoading(false);\n  };\n\n  const loadComments = async (post: Post) => {\n    setIsLoadingComments(true);\n    try {\n      handleError(false, ErrorMessages.None);\n      const getComments = await client.get<Comment[]>(`/comments?postId=${post.id}`);\n\n      setPostComments(getComments);\n    } catch (e) {\n      handleError(true, ErrorMessages.ErrorLoadComments);\n    }\n\n    setIsLoadingComments(false);\n  };\n\n  const showPostDetails = (post: Post) => {\n    if (!isOpenSidebar) {\n      seIsOpenSidebar(true);\n      setOpenedPost(post);\n      loadComments(post);\n    }\n\n    if ((isOpenSidebar && post !== openedPost)) {\n      setOpenedPost(post);\n      loadComments(post);\n    }\n\n    if (isOpenSidebar && post === openedPost) {\n      seIsOpenSidebar(!isOpenSidebar);\n      setOpenedPost(undefined);\n    }\n  };\n\n  const addComment = async (comment: {}) => {\n    try {\n      handleError(false, ErrorMessages.None);\n      const addCommentToPost = await client.post<Comment>('/comments', comment);\n\n      setPostComments(state => (\n        [\n          ...state,\n          addCommentToPost,\n        ]\n      ));\n    } catch (e) {\n      handleError(true, ErrorMessages.ErrorAddComment);\n    }\n  };\n\n  const deleteComment = async (id: number) => {\n    const findComment = postComments.find(comment => comment.id === id);\n\n    if (!findComment) {\n      return;\n    }\n\n    try {\n      handleError(false, ErrorMessages.None);\n\n      setPostComments(state => (\n        state.filter(comment => comment.id !== id)\n      ));\n\n      await client.delete(`/comments/${id}`);\n    } catch (e) {\n      handleError(true, ErrorMessages.ErrorDeleteComment);\n      setPostComments(state => (\n        [\n          ...state,\n          findComment,\n        ]\n      ));\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  showPosts={showPosts}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {(error.isError\n                  && error.message !== ErrorMessages.ErrorLoadComments)\n                  && <Errors error={error} />}\n\n                {(selectedUser && posts.length === 0\n                && !isLoading && !error.isError) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(selectedUser && posts.length !== 0 && !isLoading) && (\n                  <PostsList\n                    posts={posts}\n                    showPostDetails={showPostDetails}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isOpenSidebar },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {openedPost && (\n                <PostDetails\n                  post={openedPost}\n                  comments={postComments}\n                  isLoadingComments={isLoadingComments}\n                  addComment={addComment}\n                  deleteComment={deleteComment}\n                  error={error}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}